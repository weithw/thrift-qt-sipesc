/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Types_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace org { namespace ssdut { namespace sipesc { namespace network { namespace types {

int _kResultCodeValues[] = {
  ResultCode::Success,
  ResultCode::TryLater,
  ResultCode::Error
};
const char* _kResultCodeNames[] = {
  "Success",
  "TryLater",
  "Error"
};
const std::map<int, const char*> _ResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kResultCodeValues, _kResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSipescErrorCodeValues[] = {
  SipescErrorCode::UNKNOWN,
  SipescErrorCode::PERMISSION_DENIED,
  SipescErrorCode::DATA_REQUIRED,
  SipescErrorCode::INVALID_AUTH,
  SipescErrorCode::AUTH_EXPIRED,
  SipescErrorCode::UNSUPPORTED_OPERATION
};
const char* _kSipescErrorCodeNames[] = {
  "UNKNOWN",
  "PERMISSION_DENIED",
  "DATA_REQUIRED",
  "INVALID_AUTH",
  "AUTH_EXPIRED",
  "UNSUPPORTED_OPERATION"
};
const std::map<int, const char*> _SipescErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kSipescErrorCodeValues, _kSipescErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPrivilegeLevelValues[] = {
  PrivilegeLevel::NORMAL,
  PrivilegeLevel::MANAGER,
  PrivilegeLevel::ADMIN
};
const char* _kPrivilegeLevelNames[] = {
  "NORMAL",
  "MANAGER",
  "ADMIN"
};
const std::map<int, const char*> _PrivilegeLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPrivilegeLevelValues, _kPrivilegeLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskStatusValues[] = {
  TaskStatus::NEW,
  TaskStatus::RUNNING,
  TaskStatus::WAITTING,
  TaskStatus::CANCELED,
  TaskStatus::DEAD,
  TaskStatus::SUCC,
  TaskStatus::ERROR,
  TaskStatus::WARNING
};
const char* _kTaskStatusNames[] = {
  "NEW",
  "RUNNING",
  "WAITTING",
  "CANCELED",
  "DEAD",
  "SUCC",
  "ERROR",
  "WARNING"
};
const std::map<int, const char*> _TaskStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTaskStatusValues, _kTaskStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


CallResult::~CallResult() throw() {
}


void CallResult::__set_resultCode(const ResultCode::type val) {
  this->resultCode = val;
}

void CallResult::__set_message(const Text& val) {
  this->message = val;
__isset.message = true;
}

void CallResult::__set_boolResult(const bool val) {
  this->boolResult = val;
__isset.boolResult = true;
}

void CallResult::__set_byteResult(const int8_t val) {
  this->byteResult = val;
__isset.byteResult = true;
}

void CallResult::__set_i16Result(const int16_t val) {
  this->i16Result = val;
__isset.i16Result = true;
}

void CallResult::__set_i32Result(const int32_t val) {
  this->i32Result = val;
__isset.i32Result = true;
}

void CallResult::__set_i64Result(const int64_t val) {
  this->i64Result = val;
__isset.i64Result = true;
}

void CallResult::__set_doubleResult(const double val) {
  this->doubleResult = val;
__isset.doubleResult = true;
}

void CallResult::__set_strResult(const std::string& val) {
  this->strResult = val;
__isset.strResult = true;
}

void CallResult::__set_binResult(const std::string& val) {
  this->binResult = val;
__isset.binResult = true;
}

const char* CallResult::ascii_fingerprint = "76520BBDC91ED82597133CD567017AE3";
const uint8_t CallResult::binary_fingerprint[16] = {0x76,0x52,0x0B,0xBD,0xC9,0x1E,0xD8,0x25,0x97,0x13,0x3C,0xD5,0x67,0x01,0x7A,0xE3};

uint32_t CallResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resultCode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->resultCode = (ResultCode::type)ecast0;
          isset_resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->boolResult);
          this->__isset.boolResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->byteResult);
          this->__isset.byteResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->i16Result);
          this->__isset.i16Result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32Result);
          this->__isset.i32Result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->i64Result);
          this->__isset.i64Result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->doubleResult);
          this->__isset.doubleResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strResult);
          this->__isset.strResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->binResult);
          this->__isset.binResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resultCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CallResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CallResult");

  xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->resultCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.boolResult) {
    xfer += oprot->writeFieldBegin("boolResult", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->boolResult);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.byteResult) {
    xfer += oprot->writeFieldBegin("byteResult", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->byteResult);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i16Result) {
    xfer += oprot->writeFieldBegin("i16Result", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->i16Result);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i32Result) {
    xfer += oprot->writeFieldBegin("i32Result", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->i32Result);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64Result) {
    xfer += oprot->writeFieldBegin("i64Result", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->i64Result);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.doubleResult) {
    xfer += oprot->writeFieldBegin("doubleResult", ::apache::thrift::protocol::T_DOUBLE, 8);
    xfer += oprot->writeDouble(this->doubleResult);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strResult) {
    xfer += oprot->writeFieldBegin("strResult", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->strResult);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.binResult) {
    xfer += oprot->writeFieldBegin("binResult", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeBinary(this->binResult);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CallResult &a, CallResult &b) {
  using ::std::swap;
  swap(a.resultCode, b.resultCode);
  swap(a.message, b.message);
  swap(a.boolResult, b.boolResult);
  swap(a.byteResult, b.byteResult);
  swap(a.i16Result, b.i16Result);
  swap(a.i32Result, b.i32Result);
  swap(a.i64Result, b.i64Result);
  swap(a.doubleResult, b.doubleResult);
  swap(a.strResult, b.strResult);
  swap(a.binResult, b.binResult);
  swap(a.__isset, b.__isset);
}

CallResult::CallResult(const CallResult& other1) {
  resultCode = other1.resultCode;
  message = other1.message;
  boolResult = other1.boolResult;
  byteResult = other1.byteResult;
  i16Result = other1.i16Result;
  i32Result = other1.i32Result;
  i64Result = other1.i64Result;
  doubleResult = other1.doubleResult;
  strResult = other1.strResult;
  binResult = other1.binResult;
  __isset = other1.__isset;
}
CallResult& CallResult::operator=(const CallResult& other2) {
  resultCode = other2.resultCode;
  message = other2.message;
  boolResult = other2.boolResult;
  byteResult = other2.byteResult;
  i16Result = other2.i16Result;
  i32Result = other2.i32Result;
  i64Result = other2.i64Result;
  doubleResult = other2.doubleResult;
  strResult = other2.strResult;
  binResult = other2.binResult;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CallResult& obj) {
  using apache::thrift::to_string;
  out << "CallResult(";
  out << "resultCode=" << to_string(obj.resultCode);
  out << ", " << "message="; (obj.__isset.message ? (out << to_string(obj.message)) : (out << "<null>"));
  out << ", " << "boolResult="; (obj.__isset.boolResult ? (out << to_string(obj.boolResult)) : (out << "<null>"));
  out << ", " << "byteResult="; (obj.__isset.byteResult ? (out << to_string(obj.byteResult)) : (out << "<null>"));
  out << ", " << "i16Result="; (obj.__isset.i16Result ? (out << to_string(obj.i16Result)) : (out << "<null>"));
  out << ", " << "i32Result="; (obj.__isset.i32Result ? (out << to_string(obj.i32Result)) : (out << "<null>"));
  out << ", " << "i64Result="; (obj.__isset.i64Result ? (out << to_string(obj.i64Result)) : (out << "<null>"));
  out << ", " << "doubleResult="; (obj.__isset.doubleResult ? (out << to_string(obj.doubleResult)) : (out << "<null>"));
  out << ", " << "strResult="; (obj.__isset.strResult ? (out << to_string(obj.strResult)) : (out << "<null>"));
  out << ", " << "binResult="; (obj.__isset.binResult ? (out << to_string(obj.binResult)) : (out << "<null>"));
  out << ")";
  return out;
}


SipescException::~SipescException() throw() {
}


void SipescException::__set_errorCode(const SipescErrorCode::type val) {
  this->errorCode = val;
}

void SipescException::__set_why(const Text& val) {
  this->why = val;
__isset.why = true;
}

const char* SipescException::ascii_fingerprint = "24652790C81ECE22B629CB60A19F1E93";
const uint8_t SipescException::binary_fingerprint[16] = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

uint32_t SipescException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorCode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->errorCode = (SipescErrorCode::type)ecast3;
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SipescException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SipescException");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.why) {
    xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->why);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SipescException &a, SipescException &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

SipescException::SipescException(const SipescException& other4) : TException() {
  errorCode = other4.errorCode;
  why = other4.why;
  __isset = other4.__isset;
}
SipescException& SipescException::operator=(const SipescException& other5) {
  errorCode = other5.errorCode;
  why = other5.why;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SipescException& obj) {
  using apache::thrift::to_string;
  out << "SipescException(";
  out << "errorCode=" << to_string(obj.errorCode);
  out << ", " << "why="; (obj.__isset.why ? (out << to_string(obj.why)) : (out << "<null>"));
  out << ")";
  return out;
}


Data::~Data() throw() {
}


void Data::__set_size(const int64_t val) {
  this->size = val;
__isset.size = true;
}

void Data::__set_content(const Bytes& val) {
  this->content = val;
__isset.content = true;
}

const char* Data::ascii_fingerprint = "FE98095225EE247AF7C97326C83DA597";
const uint8_t Data::binary_fingerprint[16] = {0xFE,0x98,0x09,0x52,0x25,0xEE,0x24,0x7A,0xF7,0xC9,0x73,0x26,0xC8,0x3D,0xA5,0x97};

uint32_t Data::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Data");

  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.content) {
    xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->content);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Data &a, Data &b) {
  using ::std::swap;
  swap(a.size, b.size);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

Data::Data(const Data& other6) {
  size = other6.size;
  content = other6.content;
  __isset = other6.__isset;
}
Data& Data::operator=(const Data& other7) {
  size = other7.size;
  content = other7.content;
  __isset = other7.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Data& obj) {
  using apache::thrift::to_string;
  out << "Data(";
  out << "size="; (obj.__isset.size ? (out << to_string(obj.size)) : (out << "<null>"));
  out << ", " << "content="; (obj.__isset.content ? (out << to_string(obj.content)) : (out << "<null>"));
  out << ")";
  return out;
}


User::~User() throw() {
}


void User::__set_id(const ID val) {
  this->id = val;
__isset.id = true;
}

void User::__set_userName(const std::string& val) {
  this->userName = val;
}

void User::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void User::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void User::__set_privilege(const PrivilegeLevel::type val) {
  this->privilege = val;
__isset.privilege = true;
}

void User::__set_created(const Timestamp val) {
  this->created = val;
__isset.created = true;
}

void User::__set_address(const std::string& val) {
  this->address = val;
__isset.address = true;
}

void User::__set_comments(const Text& val) {
  this->comments = val;
__isset.comments = true;
}

const char* User::ascii_fingerprint = "AF74FC75E38208017CE242B35D39C051";
const uint8_t User::binary_fingerprint[16] = {0xAF,0x74,0xFC,0x75,0xE3,0x82,0x08,0x01,0x7C,0xE2,0x42,0xB3,0x5D,0x39,0xC0,0x51};

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          isset_userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->privilege = (PrivilegeLevel::type)ecast8;
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comments);
          this->__isset.comments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("User");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.created) {
    xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->created);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.comments) {
    xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->comments);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.address) {
    xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->address);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.userName, b.userName);
  swap(a.email, b.email);
  swap(a.name, b.name);
  swap(a.privilege, b.privilege);
  swap(a.created, b.created);
  swap(a.address, b.address);
  swap(a.comments, b.comments);
  swap(a.__isset, b.__isset);
}

User::User(const User& other9) {
  id = other9.id;
  userName = other9.userName;
  email = other9.email;
  name = other9.name;
  privilege = other9.privilege;
  created = other9.created;
  address = other9.address;
  comments = other9.comments;
  __isset = other9.__isset;
}
User& User::operator=(const User& other10) {
  id = other10.id;
  userName = other10.userName;
  email = other10.email;
  name = other10.name;
  privilege = other10.privilege;
  created = other10.created;
  address = other10.address;
  comments = other10.comments;
  __isset = other10.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const User& obj) {
  using apache::thrift::to_string;
  out << "User(";
  out << "id="; (obj.__isset.id ? (out << to_string(obj.id)) : (out << "<null>"));
  out << ", " << "userName=" << to_string(obj.userName);
  out << ", " << "email="; (obj.__isset.email ? (out << to_string(obj.email)) : (out << "<null>"));
  out << ", " << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ", " << "privilege="; (obj.__isset.privilege ? (out << to_string(obj.privilege)) : (out << "<null>"));
  out << ", " << "created="; (obj.__isset.created ? (out << to_string(obj.created)) : (out << "<null>"));
  out << ", " << "address="; (obj.__isset.address ? (out << to_string(obj.address)) : (out << "<null>"));
  out << ", " << "comments="; (obj.__isset.comments ? (out << to_string(obj.comments)) : (out << "<null>"));
  out << ")";
  return out;
}


PublicUserInfo::~PublicUserInfo() throw() {
}


void PublicUserInfo::__set_userId(const ID val) {
  this->userId = val;
}

void PublicUserInfo::__set_username(const std::string& val) {
  this->username = val;
__isset.username = true;
}

const char* PublicUserInfo::ascii_fingerprint = "96705E9A3FD7B072319C71653E0DBB90";
const uint8_t PublicUserInfo::binary_fingerprint[16] = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

uint32_t PublicUserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          isset_userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PublicUserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PublicUserInfo");

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PublicUserInfo &a, PublicUserInfo &b) {
  using ::std::swap;
  swap(a.userId, b.userId);
  swap(a.username, b.username);
  swap(a.__isset, b.__isset);
}

PublicUserInfo::PublicUserInfo(const PublicUserInfo& other11) {
  userId = other11.userId;
  username = other11.username;
  __isset = other11.__isset;
}
PublicUserInfo& PublicUserInfo::operator=(const PublicUserInfo& other12) {
  userId = other12.userId;
  username = other12.username;
  __isset = other12.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PublicUserInfo& obj) {
  using apache::thrift::to_string;
  out << "PublicUserInfo(";
  out << "userId=" << to_string(obj.userId);
  out << ", " << "username="; (obj.__isset.username ? (out << to_string(obj.username)) : (out << "<null>"));
  out << ")";
  return out;
}


AuthenticationResult::~AuthenticationResult() throw() {
}


void AuthenticationResult::__set_currentTime(const Timestamp val) {
  this->currentTime = val;
}

void AuthenticationResult::__set_authenticationToken(const std::string& val) {
  this->authenticationToken = val;
}

void AuthenticationResult::__set_expiration(const Timestamp val) {
  this->expiration = val;
}

void AuthenticationResult::__set_user(const User& val) {
  this->user = val;
__isset.user = true;
}

const char* AuthenticationResult::ascii_fingerprint = "D91DF35D7C81FB47A9781E890AC24A9C";
const uint8_t AuthenticationResult::binary_fingerprint[16] = {0xD9,0x1D,0xF3,0x5D,0x7C,0x81,0xFB,0x47,0xA9,0x78,0x1E,0x89,0x0A,0xC2,0x4A,0x9C};

uint32_t AuthenticationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currentTime = false;
  bool isset_authenticationToken = false;
  bool isset_expiration = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->currentTime);
          isset_currentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authenticationToken);
          isset_authenticationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expiration);
          isset_expiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user.read(iprot);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currentTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_authenticationToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expiration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AuthenticationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AuthenticationResult");

  xfer += oprot->writeFieldBegin("currentTime", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->currentTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authenticationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->authenticationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expiration", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->expiration);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.user) {
    xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->user.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AuthenticationResult &a, AuthenticationResult &b) {
  using ::std::swap;
  swap(a.currentTime, b.currentTime);
  swap(a.authenticationToken, b.authenticationToken);
  swap(a.expiration, b.expiration);
  swap(a.user, b.user);
  swap(a.__isset, b.__isset);
}

AuthenticationResult::AuthenticationResult(const AuthenticationResult& other13) {
  currentTime = other13.currentTime;
  authenticationToken = other13.authenticationToken;
  expiration = other13.expiration;
  user = other13.user;
  __isset = other13.__isset;
}
AuthenticationResult& AuthenticationResult::operator=(const AuthenticationResult& other14) {
  currentTime = other14.currentTime;
  authenticationToken = other14.authenticationToken;
  expiration = other14.expiration;
  user = other14.user;
  __isset = other14.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AuthenticationResult& obj) {
  using apache::thrift::to_string;
  out << "AuthenticationResult(";
  out << "currentTime=" << to_string(obj.currentTime);
  out << ", " << "authenticationToken=" << to_string(obj.authenticationToken);
  out << ", " << "expiration=" << to_string(obj.expiration);
  out << ", " << "user="; (obj.__isset.user ? (out << to_string(obj.user)) : (out << "<null>"));
  out << ")";
  return out;
}


Task::~Task() throw() {
}


void Task::__set_taskId(const ID val) {
  this->taskId = val;
__isset.taskId = true;
}

void Task::__set_userId(const ID val) {
  this->userId = val;
__isset.userId = true;
}

void Task::__set_createdTime(const Timestamp val) {
  this->createdTime = val;
__isset.createdTime = true;
}

void Task::__set_startedTime(const Timestamp val) {
  this->startedTime = val;
__isset.startedTime = true;
}

void Task::__set_stopedTime(const Timestamp val) {
  this->stopedTime = val;
__isset.stopedTime = true;
}

void Task::__set_currentTime(const Timestamp val) {
  this->currentTime = val;
__isset.currentTime = true;
}

void Task::__set_rawCommand(const std::string& val) {
  this->rawCommand = val;
}

void Task::__set_inputFileNames(const std::vector<std::string> & val) {
  this->inputFileNames = val;
__isset.inputFileNames = true;
}

void Task::__set_outputFileNames(const std::vector<std::string> & val) {
  this->outputFileNames = val;
__isset.outputFileNames = true;
}

void Task::__set_description(const Text& val) {
  this->description = val;
__isset.description = true;
}

void Task::__set_status(const TaskStatus::type val) {
  this->status = val;
__isset.status = true;
}

void Task::__set_statusComments(const Text& val) {
  this->statusComments = val;
__isset.statusComments = true;
}

void Task::__set_previousTask(const ID val) {
  this->previousTask = val;
__isset.previousTask = true;
}

void Task::__set_nextTask(const ID val) {
  this->nextTask = val;
__isset.nextTask = true;
}

const char* Task::ascii_fingerprint = "5BADC010C7F172D895C75A64ED957B83";
const uint8_t Task::binary_fingerprint[16] = {0x5B,0xAD,0xC0,0x10,0xC7,0xF1,0x72,0xD8,0x95,0xC7,0x5A,0x64,0xED,0x95,0x7B,0x83};

uint32_t Task::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rawCommand = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->taskId);
          this->__isset.taskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startedTime);
          this->__isset.startedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stopedTime);
          this->__isset.stopedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->currentTime);
          this->__isset.currentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rawCommand);
          isset_rawCommand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->inputFileNames.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->inputFileNames.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readString(this->inputFileNames[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.inputFileNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->outputFileNames.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->outputFileNames.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += iprot->readString(this->outputFileNames[_i24]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.outputFileNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast25;
          xfer += iprot->readI32(ecast25);
          this->status = (TaskStatus::type)ecast25;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusComments);
          this->__isset.statusComments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->previousTask);
          this->__isset.previousTask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nextTask);
          this->__isset.nextTask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rawCommand)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Task::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Task");

  if (this->__isset.taskId) {
    xfer += oprot->writeFieldBegin("taskId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->taskId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userId) {
    xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->userId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdTime) {
    xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->createdTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startedTime) {
    xfer += oprot->writeFieldBegin("startedTime", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->startedTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stopedTime) {
    xfer += oprot->writeFieldBegin("stopedTime", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->stopedTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currentTime) {
    xfer += oprot->writeFieldBegin("currentTime", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->currentTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("rawCommand", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->rawCommand);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.inputFileNames) {
    xfer += oprot->writeFieldBegin("inputFileNames", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->inputFileNames.size()));
      std::vector<std::string> ::const_iterator _iter26;
      for (_iter26 = this->inputFileNames.begin(); _iter26 != this->inputFileNames.end(); ++_iter26)
      {
        xfer += oprot->writeString((*_iter26));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputFileNames) {
    xfer += oprot->writeFieldBegin("outputFileNames", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->outputFileNames.size()));
      std::vector<std::string> ::const_iterator _iter27;
      for (_iter27 = this->outputFileNames.begin(); _iter27 != this->outputFileNames.end(); ++_iter27)
      {
        xfer += oprot->writeString((*_iter27));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.statusComments) {
    xfer += oprot->writeFieldBegin("statusComments", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->statusComments);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.previousTask) {
    xfer += oprot->writeFieldBegin("previousTask", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->previousTask);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextTask) {
    xfer += oprot->writeFieldBegin("nextTask", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->nextTask);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Task &a, Task &b) {
  using ::std::swap;
  swap(a.taskId, b.taskId);
  swap(a.userId, b.userId);
  swap(a.createdTime, b.createdTime);
  swap(a.startedTime, b.startedTime);
  swap(a.stopedTime, b.stopedTime);
  swap(a.currentTime, b.currentTime);
  swap(a.rawCommand, b.rawCommand);
  swap(a.inputFileNames, b.inputFileNames);
  swap(a.outputFileNames, b.outputFileNames);
  swap(a.description, b.description);
  swap(a.status, b.status);
  swap(a.statusComments, b.statusComments);
  swap(a.previousTask, b.previousTask);
  swap(a.nextTask, b.nextTask);
  swap(a.__isset, b.__isset);
}

Task::Task(const Task& other28) {
  taskId = other28.taskId;
  userId = other28.userId;
  createdTime = other28.createdTime;
  startedTime = other28.startedTime;
  stopedTime = other28.stopedTime;
  currentTime = other28.currentTime;
  rawCommand = other28.rawCommand;
  inputFileNames = other28.inputFileNames;
  outputFileNames = other28.outputFileNames;
  description = other28.description;
  status = other28.status;
  statusComments = other28.statusComments;
  previousTask = other28.previousTask;
  nextTask = other28.nextTask;
  __isset = other28.__isset;
}
Task& Task::operator=(const Task& other29) {
  taskId = other29.taskId;
  userId = other29.userId;
  createdTime = other29.createdTime;
  startedTime = other29.startedTime;
  stopedTime = other29.stopedTime;
  currentTime = other29.currentTime;
  rawCommand = other29.rawCommand;
  inputFileNames = other29.inputFileNames;
  outputFileNames = other29.outputFileNames;
  description = other29.description;
  status = other29.status;
  statusComments = other29.statusComments;
  previousTask = other29.previousTask;
  nextTask = other29.nextTask;
  __isset = other29.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Task& obj) {
  using apache::thrift::to_string;
  out << "Task(";
  out << "taskId="; (obj.__isset.taskId ? (out << to_string(obj.taskId)) : (out << "<null>"));
  out << ", " << "userId="; (obj.__isset.userId ? (out << to_string(obj.userId)) : (out << "<null>"));
  out << ", " << "createdTime="; (obj.__isset.createdTime ? (out << to_string(obj.createdTime)) : (out << "<null>"));
  out << ", " << "startedTime="; (obj.__isset.startedTime ? (out << to_string(obj.startedTime)) : (out << "<null>"));
  out << ", " << "stopedTime="; (obj.__isset.stopedTime ? (out << to_string(obj.stopedTime)) : (out << "<null>"));
  out << ", " << "currentTime="; (obj.__isset.currentTime ? (out << to_string(obj.currentTime)) : (out << "<null>"));
  out << ", " << "rawCommand=" << to_string(obj.rawCommand);
  out << ", " << "inputFileNames="; (obj.__isset.inputFileNames ? (out << to_string(obj.inputFileNames)) : (out << "<null>"));
  out << ", " << "outputFileNames="; (obj.__isset.outputFileNames ? (out << to_string(obj.outputFileNames)) : (out << "<null>"));
  out << ", " << "description="; (obj.__isset.description ? (out << to_string(obj.description)) : (out << "<null>"));
  out << ", " << "status="; (obj.__isset.status ? (out << to_string(obj.status)) : (out << "<null>"));
  out << ", " << "statusComments="; (obj.__isset.statusComments ? (out << to_string(obj.statusComments)) : (out << "<null>"));
  out << ", " << "previousTask="; (obj.__isset.previousTask ? (out << to_string(obj.previousTask)) : (out << "<null>"));
  out << ", " << "nextTask="; (obj.__isset.nextTask ? (out << to_string(obj.nextTask)) : (out << "<null>"));
  out << ")";
  return out;
}

}}}}} // namespace
