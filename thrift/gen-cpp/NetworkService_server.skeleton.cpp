// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "NetworkService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::org::ssdut::sipesc::network::service;

class NetworkServiceHandler : virtual public NetworkServiceIf {
 public:
  NetworkServiceHandler() {
    // Your initialization goes here
  }

  /**
   * 测试能否通信。
   */
  void ping( ::org::ssdut::sipesc::network::types::CallResult& _return) {
    // Your implementation goes here
    printf("ping\n");
  }

  /**
   * 登录到服务器
   * 
   * @param username
   * @param password
   */
  void login( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return, const std::string& username, const std::string& password) {
    // Your implementation goes here
    printf("login\n");
  }

  /**
   * 注册
   * 
   * @param newUser
   * @param password
   */
  bool regist(const  ::org::ssdut::sipesc::network::types::User& newUser, const std::string& password) {
    // Your implementation goes here
    printf("regist\n");
  }

  /**
   * 退出登录
   * 
   * @param authenticationToken
   */
  void logout(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("logout\n");
  }

  /**
   * 更新会话
   * 
   * @param authenticationToken
   */
  void refreshAuthentication( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("refreshAuthentication\n");
  }

  /**
   * 获得当前账户信息
   * 
   * @param authenticationToken
   */
  void getUser( ::org::ssdut::sipesc::network::types::User& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getUser\n");
  }

  /**
   * 获得用户公开信息
   * 
   * @param username
   */
  void getPublicUserInfo( ::org::ssdut::sipesc::network::types::PublicUserInfo& _return, const std::string& username) {
    // Your implementation goes here
    printf("getPublicUserInfo\n");
  }

  /**
   * 获得用户的指定任务信息。
   * 
   * @param authenticationToken
   * @param taskId
   */
  void getTask( ::org::ssdut::sipesc::network::types::Task& _return, const std::string& authenticationToken, const  ::org::ssdut::sipesc::network::types::ID taskId) {
    // Your implementation goes here
    printf("getTask\n");
  }

  /**
   * 获得当前用户的所有任务。
   * 
   * @param authenticationToken
   */
  void listTasks(std::vector< ::org::ssdut::sipesc::network::types::Task> & _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("listTasks\n");
  }

  /**
   * 提交一个任务
   * 
   * @param authenticationToken
   * @param rawCommand
   */
  void postTask( ::org::ssdut::sipesc::network::types::CallResult& _return, const std::string& authenticationToken, const std::string& rawCommand) {
    // Your implementation goes here
    printf("postTask\n");
  }

  /**
   * 上传一部分文件数据到服务器，用户目录下，这个版本用于不大的文件
   * 
   * @param authenticationToken
   * @param fileName
   * @param size
   * @param data
   */
  int64_t uploadFile(const std::string& authenticationToken, const std::string& fileName, const int64_t size, const  ::org::ssdut::sipesc::network::types::Bytes& data) {
    // Your implementation goes here
    printf("uploadFile\n");
  }

  /**
   * 删除服务器文件
   * 
   * @param authenticationToken
   * @param fileName
   */
  void deleteFile( ::org::ssdut::sipesc::network::types::CallResult& _return, const std::string& authenticationToken, const std::string& fileName) {
    // Your implementation goes here
    printf("deleteFile\n");
  }

  /**
   * 下载文件
   * 
   * @param authenticationToken
   * @param fileName
   */
  void downloadFile( ::org::ssdut::sipesc::network::types::Bytes& _return, const std::string& authenticationToken, const std::string& fileName) {
    // Your implementation goes here
    printf("downloadFile\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<NetworkServiceHandler> handler(new NetworkServiceHandler());
  shared_ptr<TProcessor> processor(new NetworkServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

