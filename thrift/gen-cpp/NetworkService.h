/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NetworkService_H
#define NetworkService_H

#include <thrift/TDispatchProcessor.h>
#include "Network_types.h"

namespace org { namespace ssdut { namespace sipesc { namespace network { namespace service {

class NetworkServiceIf {
 public:
  virtual ~NetworkServiceIf() {}

  /**
   * 测试能否通信。
   */
  virtual void ping( ::org::ssdut::sipesc::network::types::CallResult& _return) = 0;

  /**
   * 登录到服务器
   * 
   * @param username
   * @param password
   */
  virtual void login( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return, const std::string& username, const std::string& password) = 0;

  /**
   * 退出登录
   * 
   * @param authenticationToken
   */
  virtual void logout(const std::string& authenticationToken) = 0;

  /**
   * 更新会话
   * 
   * @param authenticationToken
   */
  virtual void refreshAuthentication( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return, const std::string& authenticationToken) = 0;

  /**
   * 获得当前账户信息
   * 
   * @param authenticationToken
   */
  virtual void getUser( ::org::ssdut::sipesc::network::types::User& _return, const std::string& authenticationToken) = 0;

  /**
   * 获得用户公开信息
   * 
   * @param username
   */
  virtual void getPublicUserInfo( ::org::ssdut::sipesc::network::types::PublicUserInfo& _return, const std::string& username) = 0;

  /**
   * 获得用户的指定任务信息。
   * 
   * @param authenticationToken
   * @param taskId
   */
  virtual void getTask( ::org::ssdut::sipesc::network::types::Task& _return, const std::string& authenticationToken, const  ::org::ssdut::sipesc::network::types::ID taskId) = 0;

  /**
   * 获得当前用户的所有任务。
   * 
   * @param authenticationToken
   */
  virtual void listTasks(std::vector< ::org::ssdut::sipesc::network::types::Task> & _return, const std::string& authenticationToken) = 0;

  /**
   * 提交一个任务
   * 
   * @param authenticationToken
   * @param rawCommand
   */
  virtual void postTask( ::org::ssdut::sipesc::network::types::CallResult& _return, const std::string& authenticationToken, const std::string& rawCommand) = 0;

  /**
   * 上传一部分文件数据到服务器，用户目录下，这个版本用于不大的文件
   * 
   * @param authenticationToken
   * @param fileName
   * @param size
   * @param data
   */
  virtual int64_t uploadFile(const std::string& authenticationToken, const std::string& fileName, const int64_t size, const  ::org::ssdut::sipesc::network::types::Bytes& data) = 0;

  /**
   * 删除服务器文件
   * 
   * @param authenticationToken
   * @param fileName
   */
  virtual void deleteFile( ::org::ssdut::sipesc::network::types::CallResult& _return, const std::string& authenticationToken, const std::string& fileName) = 0;

  /**
   * 下载文件
   * 
   * @param authenticationToken
   * @param fileName
   */
  virtual void downloadFile( ::org::ssdut::sipesc::network::types::Bytes& _return, const std::string& authenticationToken, const std::string& fileName) = 0;
};

class NetworkServiceIfFactory {
 public:
  typedef NetworkServiceIf Handler;

  virtual ~NetworkServiceIfFactory() {}

  virtual NetworkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NetworkServiceIf* /* handler */) = 0;
};

class NetworkServiceIfSingletonFactory : virtual public NetworkServiceIfFactory {
 public:
  NetworkServiceIfSingletonFactory(const boost::shared_ptr<NetworkServiceIf>& iface) : iface_(iface) {}
  virtual ~NetworkServiceIfSingletonFactory() {}

  virtual NetworkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NetworkServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<NetworkServiceIf> iface_;
};

class NetworkServiceNull : virtual public NetworkServiceIf {
 public:
  virtual ~NetworkServiceNull() {}
  void ping( ::org::ssdut::sipesc::network::types::CallResult& /* _return */) {
    return;
  }
  void login( ::org::ssdut::sipesc::network::types::AuthenticationResult& /* _return */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void logout(const std::string& /* authenticationToken */) {
    return;
  }
  void refreshAuthentication( ::org::ssdut::sipesc::network::types::AuthenticationResult& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void getUser( ::org::ssdut::sipesc::network::types::User& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void getPublicUserInfo( ::org::ssdut::sipesc::network::types::PublicUserInfo& /* _return */, const std::string& /* username */) {
    return;
  }
  void getTask( ::org::ssdut::sipesc::network::types::Task& /* _return */, const std::string& /* authenticationToken */, const  ::org::ssdut::sipesc::network::types::ID /* taskId */) {
    return;
  }
  void listTasks(std::vector< ::org::ssdut::sipesc::network::types::Task> & /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void postTask( ::org::ssdut::sipesc::network::types::CallResult& /* _return */, const std::string& /* authenticationToken */, const std::string& /* rawCommand */) {
    return;
  }
  int64_t uploadFile(const std::string& /* authenticationToken */, const std::string& /* fileName */, const int64_t /* size */, const  ::org::ssdut::sipesc::network::types::Bytes& /* data */) {
    int64_t _return = 0;
    return _return;
  }
  void deleteFile( ::org::ssdut::sipesc::network::types::CallResult& /* _return */, const std::string& /* authenticationToken */, const std::string& /* fileName */) {
    return;
  }
  void downloadFile( ::org::ssdut::sipesc::network::types::Bytes& /* _return */, const std::string& /* authenticationToken */, const std::string& /* fileName */) {
    return;
  }
};


class NetworkService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  NetworkService_ping_args(const NetworkService_ping_args&);
  NetworkService_ping_args& operator=(const NetworkService_ping_args&);
  NetworkService_ping_args() {
  }

  virtual ~NetworkService_ping_args() throw();

  bool operator == (const NetworkService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NetworkService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_ping_args& obj);
};


class NetworkService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~NetworkService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_ping_pargs& obj);
};

typedef struct _NetworkService_ping_result__isset {
  _NetworkService_ping_result__isset() : success(false) {}
  bool success :1;
} _NetworkService_ping_result__isset;

class NetworkService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "E36886E162B5F94DE56276E567331D05";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x68,0x86,0xE1,0x62,0xB5,0xF9,0x4D,0xE5,0x62,0x76,0xE5,0x67,0x33,0x1D,0x05};

  NetworkService_ping_result(const NetworkService_ping_result&);
  NetworkService_ping_result& operator=(const NetworkService_ping_result&);
  NetworkService_ping_result() {
  }

  virtual ~NetworkService_ping_result() throw();
   ::org::ssdut::sipesc::network::types::CallResult success;

  _NetworkService_ping_result__isset __isset;

  void __set_success(const  ::org::ssdut::sipesc::network::types::CallResult& val);

  bool operator == (const NetworkService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NetworkService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_ping_result& obj);
};

typedef struct _NetworkService_ping_presult__isset {
  _NetworkService_ping_presult__isset() : success(false) {}
  bool success :1;
} _NetworkService_ping_presult__isset;

class NetworkService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "E36886E162B5F94DE56276E567331D05";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x68,0x86,0xE1,0x62,0xB5,0xF9,0x4D,0xE5,0x62,0x76,0xE5,0x67,0x33,0x1D,0x05};


  virtual ~NetworkService_ping_presult() throw();
   ::org::ssdut::sipesc::network::types::CallResult* success;

  _NetworkService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_ping_presult& obj);
};

typedef struct _NetworkService_login_args__isset {
  _NetworkService_login_args__isset() : username(false), password(false) {}
  bool username :1;
  bool password :1;
} _NetworkService_login_args__isset;

class NetworkService_login_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  NetworkService_login_args(const NetworkService_login_args&);
  NetworkService_login_args& operator=(const NetworkService_login_args&);
  NetworkService_login_args() : username(), password() {
  }

  virtual ~NetworkService_login_args() throw();
  std::string username;
  std::string password;

  _NetworkService_login_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const NetworkService_login_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const NetworkService_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_login_args& obj);
};


class NetworkService_login_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~NetworkService_login_pargs() throw();
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_login_pargs& obj);
};

typedef struct _NetworkService_login_result__isset {
  _NetworkService_login_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_login_result__isset;

class NetworkService_login_result {
 public:

  static const char* ascii_fingerprint; // = "8157322F8F33722E8ED334B1649B4644";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x57,0x32,0x2F,0x8F,0x33,0x72,0x2E,0x8E,0xD3,0x34,0xB1,0x64,0x9B,0x46,0x44};

  NetworkService_login_result(const NetworkService_login_result&);
  NetworkService_login_result& operator=(const NetworkService_login_result&);
  NetworkService_login_result() {
  }

  virtual ~NetworkService_login_result() throw();
   ::org::ssdut::sipesc::network::types::AuthenticationResult success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_login_result__isset __isset;

  void __set_success(const  ::org::ssdut::sipesc::network::types::AuthenticationResult& val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_login_result& obj);
};

typedef struct _NetworkService_login_presult__isset {
  _NetworkService_login_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_login_presult__isset;

class NetworkService_login_presult {
 public:

  static const char* ascii_fingerprint; // = "8157322F8F33722E8ED334B1649B4644";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x57,0x32,0x2F,0x8F,0x33,0x72,0x2E,0x8E,0xD3,0x34,0xB1,0x64,0x9B,0x46,0x44};


  virtual ~NetworkService_login_presult() throw();
   ::org::ssdut::sipesc::network::types::AuthenticationResult* success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_login_presult& obj);
};

typedef struct _NetworkService_logout_args__isset {
  _NetworkService_logout_args__isset() : authenticationToken(false) {}
  bool authenticationToken :1;
} _NetworkService_logout_args__isset;

class NetworkService_logout_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NetworkService_logout_args(const NetworkService_logout_args&);
  NetworkService_logout_args& operator=(const NetworkService_logout_args&);
  NetworkService_logout_args() : authenticationToken() {
  }

  virtual ~NetworkService_logout_args() throw();
  std::string authenticationToken;

  _NetworkService_logout_args__isset __isset;

  void __set_authenticationToken(const std::string& val);

  bool operator == (const NetworkService_logout_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const NetworkService_logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_logout_args& obj);
};


class NetworkService_logout_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~NetworkService_logout_pargs() throw();
  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_logout_pargs& obj);
};

typedef struct _NetworkService_logout_result__isset {
  _NetworkService_logout_result__isset() : ex(false) {}
  bool ex :1;
} _NetworkService_logout_result__isset;

class NetworkService_logout_result {
 public:

  static const char* ascii_fingerprint; // = "F6D8B149107DF749505B245994D6D8AF";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0xD8,0xB1,0x49,0x10,0x7D,0xF7,0x49,0x50,0x5B,0x24,0x59,0x94,0xD6,0xD8,0xAF};

  NetworkService_logout_result(const NetworkService_logout_result&);
  NetworkService_logout_result& operator=(const NetworkService_logout_result&);
  NetworkService_logout_result() {
  }

  virtual ~NetworkService_logout_result() throw();
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_logout_result__isset __isset;

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_logout_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_logout_result& obj);
};

typedef struct _NetworkService_logout_presult__isset {
  _NetworkService_logout_presult__isset() : ex(false) {}
  bool ex :1;
} _NetworkService_logout_presult__isset;

class NetworkService_logout_presult {
 public:

  static const char* ascii_fingerprint; // = "F6D8B149107DF749505B245994D6D8AF";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0xD8,0xB1,0x49,0x10,0x7D,0xF7,0x49,0x50,0x5B,0x24,0x59,0x94,0xD6,0xD8,0xAF};


  virtual ~NetworkService_logout_presult() throw();
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_logout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_logout_presult& obj);
};

typedef struct _NetworkService_refreshAuthentication_args__isset {
  _NetworkService_refreshAuthentication_args__isset() : authenticationToken(false) {}
  bool authenticationToken :1;
} _NetworkService_refreshAuthentication_args__isset;

class NetworkService_refreshAuthentication_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NetworkService_refreshAuthentication_args(const NetworkService_refreshAuthentication_args&);
  NetworkService_refreshAuthentication_args& operator=(const NetworkService_refreshAuthentication_args&);
  NetworkService_refreshAuthentication_args() : authenticationToken() {
  }

  virtual ~NetworkService_refreshAuthentication_args() throw();
  std::string authenticationToken;

  _NetworkService_refreshAuthentication_args__isset __isset;

  void __set_authenticationToken(const std::string& val);

  bool operator == (const NetworkService_refreshAuthentication_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const NetworkService_refreshAuthentication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_refreshAuthentication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_refreshAuthentication_args& obj);
};


class NetworkService_refreshAuthentication_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~NetworkService_refreshAuthentication_pargs() throw();
  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_refreshAuthentication_pargs& obj);
};

typedef struct _NetworkService_refreshAuthentication_result__isset {
  _NetworkService_refreshAuthentication_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_refreshAuthentication_result__isset;

class NetworkService_refreshAuthentication_result {
 public:

  static const char* ascii_fingerprint; // = "8157322F8F33722E8ED334B1649B4644";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x57,0x32,0x2F,0x8F,0x33,0x72,0x2E,0x8E,0xD3,0x34,0xB1,0x64,0x9B,0x46,0x44};

  NetworkService_refreshAuthentication_result(const NetworkService_refreshAuthentication_result&);
  NetworkService_refreshAuthentication_result& operator=(const NetworkService_refreshAuthentication_result&);
  NetworkService_refreshAuthentication_result() {
  }

  virtual ~NetworkService_refreshAuthentication_result() throw();
   ::org::ssdut::sipesc::network::types::AuthenticationResult success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_refreshAuthentication_result__isset __isset;

  void __set_success(const  ::org::ssdut::sipesc::network::types::AuthenticationResult& val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_refreshAuthentication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_refreshAuthentication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_refreshAuthentication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_refreshAuthentication_result& obj);
};

typedef struct _NetworkService_refreshAuthentication_presult__isset {
  _NetworkService_refreshAuthentication_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_refreshAuthentication_presult__isset;

class NetworkService_refreshAuthentication_presult {
 public:

  static const char* ascii_fingerprint; // = "8157322F8F33722E8ED334B1649B4644";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x57,0x32,0x2F,0x8F,0x33,0x72,0x2E,0x8E,0xD3,0x34,0xB1,0x64,0x9B,0x46,0x44};


  virtual ~NetworkService_refreshAuthentication_presult() throw();
   ::org::ssdut::sipesc::network::types::AuthenticationResult* success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_refreshAuthentication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_refreshAuthentication_presult& obj);
};

typedef struct _NetworkService_getUser_args__isset {
  _NetworkService_getUser_args__isset() : authenticationToken(false) {}
  bool authenticationToken :1;
} _NetworkService_getUser_args__isset;

class NetworkService_getUser_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NetworkService_getUser_args(const NetworkService_getUser_args&);
  NetworkService_getUser_args& operator=(const NetworkService_getUser_args&);
  NetworkService_getUser_args() : authenticationToken() {
  }

  virtual ~NetworkService_getUser_args() throw();
  std::string authenticationToken;

  _NetworkService_getUser_args__isset __isset;

  void __set_authenticationToken(const std::string& val);

  bool operator == (const NetworkService_getUser_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const NetworkService_getUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_getUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getUser_args& obj);
};


class NetworkService_getUser_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~NetworkService_getUser_pargs() throw();
  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getUser_pargs& obj);
};

typedef struct _NetworkService_getUser_result__isset {
  _NetworkService_getUser_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_getUser_result__isset;

class NetworkService_getUser_result {
 public:

  static const char* ascii_fingerprint; // = "B7E4DAB4475A31221D35F578A2C8C25E";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xE4,0xDA,0xB4,0x47,0x5A,0x31,0x22,0x1D,0x35,0xF5,0x78,0xA2,0xC8,0xC2,0x5E};

  NetworkService_getUser_result(const NetworkService_getUser_result&);
  NetworkService_getUser_result& operator=(const NetworkService_getUser_result&);
  NetworkService_getUser_result() {
  }

  virtual ~NetworkService_getUser_result() throw();
   ::org::ssdut::sipesc::network::types::User success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_getUser_result__isset __isset;

  void __set_success(const  ::org::ssdut::sipesc::network::types::User& val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_getUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_getUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_getUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getUser_result& obj);
};

typedef struct _NetworkService_getUser_presult__isset {
  _NetworkService_getUser_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_getUser_presult__isset;

class NetworkService_getUser_presult {
 public:

  static const char* ascii_fingerprint; // = "B7E4DAB4475A31221D35F578A2C8C25E";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xE4,0xDA,0xB4,0x47,0x5A,0x31,0x22,0x1D,0x35,0xF5,0x78,0xA2,0xC8,0xC2,0x5E};


  virtual ~NetworkService_getUser_presult() throw();
   ::org::ssdut::sipesc::network::types::User* success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_getUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getUser_presult& obj);
};

typedef struct _NetworkService_getPublicUserInfo_args__isset {
  _NetworkService_getPublicUserInfo_args__isset() : username(false) {}
  bool username :1;
} _NetworkService_getPublicUserInfo_args__isset;

class NetworkService_getPublicUserInfo_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NetworkService_getPublicUserInfo_args(const NetworkService_getPublicUserInfo_args&);
  NetworkService_getPublicUserInfo_args& operator=(const NetworkService_getPublicUserInfo_args&);
  NetworkService_getPublicUserInfo_args() : username() {
  }

  virtual ~NetworkService_getPublicUserInfo_args() throw();
  std::string username;

  _NetworkService_getPublicUserInfo_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const NetworkService_getPublicUserInfo_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const NetworkService_getPublicUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_getPublicUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getPublicUserInfo_args& obj);
};


class NetworkService_getPublicUserInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~NetworkService_getPublicUserInfo_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getPublicUserInfo_pargs& obj);
};

typedef struct _NetworkService_getPublicUserInfo_result__isset {
  _NetworkService_getPublicUserInfo_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_getPublicUserInfo_result__isset;

class NetworkService_getPublicUserInfo_result {
 public:

  static const char* ascii_fingerprint; // = "C637AC5B12BA9B2A2BE38329F224415D";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x37,0xAC,0x5B,0x12,0xBA,0x9B,0x2A,0x2B,0xE3,0x83,0x29,0xF2,0x24,0x41,0x5D};

  NetworkService_getPublicUserInfo_result(const NetworkService_getPublicUserInfo_result&);
  NetworkService_getPublicUserInfo_result& operator=(const NetworkService_getPublicUserInfo_result&);
  NetworkService_getPublicUserInfo_result() {
  }

  virtual ~NetworkService_getPublicUserInfo_result() throw();
   ::org::ssdut::sipesc::network::types::PublicUserInfo success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_getPublicUserInfo_result__isset __isset;

  void __set_success(const  ::org::ssdut::sipesc::network::types::PublicUserInfo& val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_getPublicUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_getPublicUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_getPublicUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getPublicUserInfo_result& obj);
};

typedef struct _NetworkService_getPublicUserInfo_presult__isset {
  _NetworkService_getPublicUserInfo_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_getPublicUserInfo_presult__isset;

class NetworkService_getPublicUserInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "C637AC5B12BA9B2A2BE38329F224415D";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x37,0xAC,0x5B,0x12,0xBA,0x9B,0x2A,0x2B,0xE3,0x83,0x29,0xF2,0x24,0x41,0x5D};


  virtual ~NetworkService_getPublicUserInfo_presult() throw();
   ::org::ssdut::sipesc::network::types::PublicUserInfo* success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_getPublicUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getPublicUserInfo_presult& obj);
};

typedef struct _NetworkService_getTask_args__isset {
  _NetworkService_getTask_args__isset() : authenticationToken(false), taskId(false) {}
  bool authenticationToken :1;
  bool taskId :1;
} _NetworkService_getTask_args__isset;

class NetworkService_getTask_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  NetworkService_getTask_args(const NetworkService_getTask_args&);
  NetworkService_getTask_args& operator=(const NetworkService_getTask_args&);
  NetworkService_getTask_args() : authenticationToken(), taskId(0) {
  }

  virtual ~NetworkService_getTask_args() throw();
  std::string authenticationToken;
   ::org::ssdut::sipesc::network::types::ID taskId;

  _NetworkService_getTask_args__isset __isset;

  void __set_authenticationToken(const std::string& val);

  void __set_taskId(const  ::org::ssdut::sipesc::network::types::ID val);

  bool operator == (const NetworkService_getTask_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(taskId == rhs.taskId))
      return false;
    return true;
  }
  bool operator != (const NetworkService_getTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_getTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getTask_args& obj);
};


class NetworkService_getTask_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~NetworkService_getTask_pargs() throw();
  const std::string* authenticationToken;
  const  ::org::ssdut::sipesc::network::types::ID* taskId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getTask_pargs& obj);
};

typedef struct _NetworkService_getTask_result__isset {
  _NetworkService_getTask_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_getTask_result__isset;

class NetworkService_getTask_result {
 public:

  static const char* ascii_fingerprint; // = "8ADDEC516BBADE2C244B72459A11DF32";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0xDD,0xEC,0x51,0x6B,0xBA,0xDE,0x2C,0x24,0x4B,0x72,0x45,0x9A,0x11,0xDF,0x32};

  NetworkService_getTask_result(const NetworkService_getTask_result&);
  NetworkService_getTask_result& operator=(const NetworkService_getTask_result&);
  NetworkService_getTask_result() {
  }

  virtual ~NetworkService_getTask_result() throw();
   ::org::ssdut::sipesc::network::types::Task success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_getTask_result__isset __isset;

  void __set_success(const  ::org::ssdut::sipesc::network::types::Task& val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_getTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_getTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_getTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getTask_result& obj);
};

typedef struct _NetworkService_getTask_presult__isset {
  _NetworkService_getTask_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_getTask_presult__isset;

class NetworkService_getTask_presult {
 public:

  static const char* ascii_fingerprint; // = "8ADDEC516BBADE2C244B72459A11DF32";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0xDD,0xEC,0x51,0x6B,0xBA,0xDE,0x2C,0x24,0x4B,0x72,0x45,0x9A,0x11,0xDF,0x32};


  virtual ~NetworkService_getTask_presult() throw();
   ::org::ssdut::sipesc::network::types::Task* success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_getTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_getTask_presult& obj);
};

typedef struct _NetworkService_listTasks_args__isset {
  _NetworkService_listTasks_args__isset() : authenticationToken(false) {}
  bool authenticationToken :1;
} _NetworkService_listTasks_args__isset;

class NetworkService_listTasks_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NetworkService_listTasks_args(const NetworkService_listTasks_args&);
  NetworkService_listTasks_args& operator=(const NetworkService_listTasks_args&);
  NetworkService_listTasks_args() : authenticationToken() {
  }

  virtual ~NetworkService_listTasks_args() throw();
  std::string authenticationToken;

  _NetworkService_listTasks_args__isset __isset;

  void __set_authenticationToken(const std::string& val);

  bool operator == (const NetworkService_listTasks_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const NetworkService_listTasks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_listTasks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_listTasks_args& obj);
};


class NetworkService_listTasks_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~NetworkService_listTasks_pargs() throw();
  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_listTasks_pargs& obj);
};

typedef struct _NetworkService_listTasks_result__isset {
  _NetworkService_listTasks_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_listTasks_result__isset;

class NetworkService_listTasks_result {
 public:

  static const char* ascii_fingerprint; // = "0A2B635595675BFC41091231728FEC4C";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x2B,0x63,0x55,0x95,0x67,0x5B,0xFC,0x41,0x09,0x12,0x31,0x72,0x8F,0xEC,0x4C};

  NetworkService_listTasks_result(const NetworkService_listTasks_result&);
  NetworkService_listTasks_result& operator=(const NetworkService_listTasks_result&);
  NetworkService_listTasks_result() {
  }

  virtual ~NetworkService_listTasks_result() throw();
  std::vector< ::org::ssdut::sipesc::network::types::Task>  success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_listTasks_result__isset __isset;

  void __set_success(const std::vector< ::org::ssdut::sipesc::network::types::Task> & val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_listTasks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_listTasks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_listTasks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_listTasks_result& obj);
};

typedef struct _NetworkService_listTasks_presult__isset {
  _NetworkService_listTasks_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_listTasks_presult__isset;

class NetworkService_listTasks_presult {
 public:

  static const char* ascii_fingerprint; // = "0A2B635595675BFC41091231728FEC4C";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x2B,0x63,0x55,0x95,0x67,0x5B,0xFC,0x41,0x09,0x12,0x31,0x72,0x8F,0xEC,0x4C};


  virtual ~NetworkService_listTasks_presult() throw();
  std::vector< ::org::ssdut::sipesc::network::types::Task> * success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_listTasks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_listTasks_presult& obj);
};

typedef struct _NetworkService_postTask_args__isset {
  _NetworkService_postTask_args__isset() : authenticationToken(false), rawCommand(false) {}
  bool authenticationToken :1;
  bool rawCommand :1;
} _NetworkService_postTask_args__isset;

class NetworkService_postTask_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  NetworkService_postTask_args(const NetworkService_postTask_args&);
  NetworkService_postTask_args& operator=(const NetworkService_postTask_args&);
  NetworkService_postTask_args() : authenticationToken(), rawCommand() {
  }

  virtual ~NetworkService_postTask_args() throw();
  std::string authenticationToken;
  std::string rawCommand;

  _NetworkService_postTask_args__isset __isset;

  void __set_authenticationToken(const std::string& val);

  void __set_rawCommand(const std::string& val);

  bool operator == (const NetworkService_postTask_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(rawCommand == rhs.rawCommand))
      return false;
    return true;
  }
  bool operator != (const NetworkService_postTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_postTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_postTask_args& obj);
};


class NetworkService_postTask_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~NetworkService_postTask_pargs() throw();
  const std::string* authenticationToken;
  const std::string* rawCommand;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_postTask_pargs& obj);
};

typedef struct _NetworkService_postTask_result__isset {
  _NetworkService_postTask_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_postTask_result__isset;

class NetworkService_postTask_result {
 public:

  static const char* ascii_fingerprint; // = "08E5007C4FC9CC77246B6055C81ECDA4";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0xE5,0x00,0x7C,0x4F,0xC9,0xCC,0x77,0x24,0x6B,0x60,0x55,0xC8,0x1E,0xCD,0xA4};

  NetworkService_postTask_result(const NetworkService_postTask_result&);
  NetworkService_postTask_result& operator=(const NetworkService_postTask_result&);
  NetworkService_postTask_result() {
  }

  virtual ~NetworkService_postTask_result() throw();
   ::org::ssdut::sipesc::network::types::CallResult success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_postTask_result__isset __isset;

  void __set_success(const  ::org::ssdut::sipesc::network::types::CallResult& val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_postTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_postTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_postTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_postTask_result& obj);
};

typedef struct _NetworkService_postTask_presult__isset {
  _NetworkService_postTask_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_postTask_presult__isset;

class NetworkService_postTask_presult {
 public:

  static const char* ascii_fingerprint; // = "08E5007C4FC9CC77246B6055C81ECDA4";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0xE5,0x00,0x7C,0x4F,0xC9,0xCC,0x77,0x24,0x6B,0x60,0x55,0xC8,0x1E,0xCD,0xA4};


  virtual ~NetworkService_postTask_presult() throw();
   ::org::ssdut::sipesc::network::types::CallResult* success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_postTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_postTask_presult& obj);
};

typedef struct _NetworkService_uploadFile_args__isset {
  _NetworkService_uploadFile_args__isset() : authenticationToken(false), fileName(false), size(false), data(false) {}
  bool authenticationToken :1;
  bool fileName :1;
  bool size :1;
  bool data :1;
} _NetworkService_uploadFile_args__isset;

class NetworkService_uploadFile_args {
 public:

  static const char* ascii_fingerprint; // = "67CA7CC4061D5EB7B29D9595C88340E6";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0xCA,0x7C,0xC4,0x06,0x1D,0x5E,0xB7,0xB2,0x9D,0x95,0x95,0xC8,0x83,0x40,0xE6};

  NetworkService_uploadFile_args(const NetworkService_uploadFile_args&);
  NetworkService_uploadFile_args& operator=(const NetworkService_uploadFile_args&);
  NetworkService_uploadFile_args() : authenticationToken(), fileName(), size(0), data() {
  }

  virtual ~NetworkService_uploadFile_args() throw();
  std::string authenticationToken;
  std::string fileName;
  int64_t size;
   ::org::ssdut::sipesc::network::types::Bytes data;

  _NetworkService_uploadFile_args__isset __isset;

  void __set_authenticationToken(const std::string& val);

  void __set_fileName(const std::string& val);

  void __set_size(const int64_t val);

  void __set_data(const  ::org::ssdut::sipesc::network::types::Bytes& val);

  bool operator == (const NetworkService_uploadFile_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const NetworkService_uploadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_uploadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_uploadFile_args& obj);
};


class NetworkService_uploadFile_pargs {
 public:

  static const char* ascii_fingerprint; // = "67CA7CC4061D5EB7B29D9595C88340E6";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0xCA,0x7C,0xC4,0x06,0x1D,0x5E,0xB7,0xB2,0x9D,0x95,0x95,0xC8,0x83,0x40,0xE6};


  virtual ~NetworkService_uploadFile_pargs() throw();
  const std::string* authenticationToken;
  const std::string* fileName;
  const int64_t* size;
  const  ::org::ssdut::sipesc::network::types::Bytes* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_uploadFile_pargs& obj);
};

typedef struct _NetworkService_uploadFile_result__isset {
  _NetworkService_uploadFile_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_uploadFile_result__isset;

class NetworkService_uploadFile_result {
 public:

  static const char* ascii_fingerprint; // = "E01A3158D433C8111128A0E0FD559377";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x1A,0x31,0x58,0xD4,0x33,0xC8,0x11,0x11,0x28,0xA0,0xE0,0xFD,0x55,0x93,0x77};

  NetworkService_uploadFile_result(const NetworkService_uploadFile_result&);
  NetworkService_uploadFile_result& operator=(const NetworkService_uploadFile_result&);
  NetworkService_uploadFile_result() : success(0) {
  }

  virtual ~NetworkService_uploadFile_result() throw();
  int64_t success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_uploadFile_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_uploadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_uploadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_uploadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_uploadFile_result& obj);
};

typedef struct _NetworkService_uploadFile_presult__isset {
  _NetworkService_uploadFile_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_uploadFile_presult__isset;

class NetworkService_uploadFile_presult {
 public:

  static const char* ascii_fingerprint; // = "E01A3158D433C8111128A0E0FD559377";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x1A,0x31,0x58,0xD4,0x33,0xC8,0x11,0x11,0x28,0xA0,0xE0,0xFD,0x55,0x93,0x77};


  virtual ~NetworkService_uploadFile_presult() throw();
  int64_t* success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_uploadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_uploadFile_presult& obj);
};

typedef struct _NetworkService_deleteFile_args__isset {
  _NetworkService_deleteFile_args__isset() : authenticationToken(false), fileName(false) {}
  bool authenticationToken :1;
  bool fileName :1;
} _NetworkService_deleteFile_args__isset;

class NetworkService_deleteFile_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  NetworkService_deleteFile_args(const NetworkService_deleteFile_args&);
  NetworkService_deleteFile_args& operator=(const NetworkService_deleteFile_args&);
  NetworkService_deleteFile_args() : authenticationToken(), fileName() {
  }

  virtual ~NetworkService_deleteFile_args() throw();
  std::string authenticationToken;
  std::string fileName;

  _NetworkService_deleteFile_args__isset __isset;

  void __set_authenticationToken(const std::string& val);

  void __set_fileName(const std::string& val);

  bool operator == (const NetworkService_deleteFile_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const NetworkService_deleteFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_deleteFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_deleteFile_args& obj);
};


class NetworkService_deleteFile_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~NetworkService_deleteFile_pargs() throw();
  const std::string* authenticationToken;
  const std::string* fileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_deleteFile_pargs& obj);
};

typedef struct _NetworkService_deleteFile_result__isset {
  _NetworkService_deleteFile_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_deleteFile_result__isset;

class NetworkService_deleteFile_result {
 public:

  static const char* ascii_fingerprint; // = "08E5007C4FC9CC77246B6055C81ECDA4";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0xE5,0x00,0x7C,0x4F,0xC9,0xCC,0x77,0x24,0x6B,0x60,0x55,0xC8,0x1E,0xCD,0xA4};

  NetworkService_deleteFile_result(const NetworkService_deleteFile_result&);
  NetworkService_deleteFile_result& operator=(const NetworkService_deleteFile_result&);
  NetworkService_deleteFile_result() {
  }

  virtual ~NetworkService_deleteFile_result() throw();
   ::org::ssdut::sipesc::network::types::CallResult success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_deleteFile_result__isset __isset;

  void __set_success(const  ::org::ssdut::sipesc::network::types::CallResult& val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_deleteFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_deleteFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_deleteFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_deleteFile_result& obj);
};

typedef struct _NetworkService_deleteFile_presult__isset {
  _NetworkService_deleteFile_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_deleteFile_presult__isset;

class NetworkService_deleteFile_presult {
 public:

  static const char* ascii_fingerprint; // = "08E5007C4FC9CC77246B6055C81ECDA4";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0xE5,0x00,0x7C,0x4F,0xC9,0xCC,0x77,0x24,0x6B,0x60,0x55,0xC8,0x1E,0xCD,0xA4};


  virtual ~NetworkService_deleteFile_presult() throw();
   ::org::ssdut::sipesc::network::types::CallResult* success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_deleteFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_deleteFile_presult& obj);
};

typedef struct _NetworkService_downloadFile_args__isset {
  _NetworkService_downloadFile_args__isset() : authenticationToken(false), fileName(false) {}
  bool authenticationToken :1;
  bool fileName :1;
} _NetworkService_downloadFile_args__isset;

class NetworkService_downloadFile_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  NetworkService_downloadFile_args(const NetworkService_downloadFile_args&);
  NetworkService_downloadFile_args& operator=(const NetworkService_downloadFile_args&);
  NetworkService_downloadFile_args() : authenticationToken(), fileName() {
  }

  virtual ~NetworkService_downloadFile_args() throw();
  std::string authenticationToken;
  std::string fileName;

  _NetworkService_downloadFile_args__isset __isset;

  void __set_authenticationToken(const std::string& val);

  void __set_fileName(const std::string& val);

  bool operator == (const NetworkService_downloadFile_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const NetworkService_downloadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_downloadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_downloadFile_args& obj);
};


class NetworkService_downloadFile_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~NetworkService_downloadFile_pargs() throw();
  const std::string* authenticationToken;
  const std::string* fileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_downloadFile_pargs& obj);
};

typedef struct _NetworkService_downloadFile_result__isset {
  _NetworkService_downloadFile_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_downloadFile_result__isset;

class NetworkService_downloadFile_result {
 public:

  static const char* ascii_fingerprint; // = "CEC3BC7F4D3989774841C1C824DE6704";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0xC3,0xBC,0x7F,0x4D,0x39,0x89,0x77,0x48,0x41,0xC1,0xC8,0x24,0xDE,0x67,0x04};

  NetworkService_downloadFile_result(const NetworkService_downloadFile_result&);
  NetworkService_downloadFile_result& operator=(const NetworkService_downloadFile_result&);
  NetworkService_downloadFile_result() : success() {
  }

  virtual ~NetworkService_downloadFile_result() throw();
   ::org::ssdut::sipesc::network::types::Bytes success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_downloadFile_result__isset __isset;

  void __set_success(const  ::org::ssdut::sipesc::network::types::Bytes& val);

  void __set_ex(const  ::org::ssdut::sipesc::network::types::SipescException& val);

  bool operator == (const NetworkService_downloadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const NetworkService_downloadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkService_downloadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_downloadFile_result& obj);
};

typedef struct _NetworkService_downloadFile_presult__isset {
  _NetworkService_downloadFile_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _NetworkService_downloadFile_presult__isset;

class NetworkService_downloadFile_presult {
 public:

  static const char* ascii_fingerprint; // = "CEC3BC7F4D3989774841C1C824DE6704";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0xC3,0xBC,0x7F,0x4D,0x39,0x89,0x77,0x48,0x41,0xC1,0xC8,0x24,0xDE,0x67,0x04};


  virtual ~NetworkService_downloadFile_presult() throw();
   ::org::ssdut::sipesc::network::types::Bytes* success;
   ::org::ssdut::sipesc::network::types::SipescException ex;

  _NetworkService_downloadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const NetworkService_downloadFile_presult& obj);
};

class NetworkServiceClient : virtual public NetworkServiceIf {
 public:
  NetworkServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NetworkServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping( ::org::ssdut::sipesc::network::types::CallResult& _return);
  void send_ping();
  void recv_ping( ::org::ssdut::sipesc::network::types::CallResult& _return);
  void login( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return, const std::string& username, const std::string& password);
  void send_login(const std::string& username, const std::string& password);
  void recv_login( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return);
  void logout(const std::string& authenticationToken);
  void send_logout(const std::string& authenticationToken);
  void recv_logout();
  void refreshAuthentication( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return, const std::string& authenticationToken);
  void send_refreshAuthentication(const std::string& authenticationToken);
  void recv_refreshAuthentication( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return);
  void getUser( ::org::ssdut::sipesc::network::types::User& _return, const std::string& authenticationToken);
  void send_getUser(const std::string& authenticationToken);
  void recv_getUser( ::org::ssdut::sipesc::network::types::User& _return);
  void getPublicUserInfo( ::org::ssdut::sipesc::network::types::PublicUserInfo& _return, const std::string& username);
  void send_getPublicUserInfo(const std::string& username);
  void recv_getPublicUserInfo( ::org::ssdut::sipesc::network::types::PublicUserInfo& _return);
  void getTask( ::org::ssdut::sipesc::network::types::Task& _return, const std::string& authenticationToken, const  ::org::ssdut::sipesc::network::types::ID taskId);
  void send_getTask(const std::string& authenticationToken, const  ::org::ssdut::sipesc::network::types::ID taskId);
  void recv_getTask( ::org::ssdut::sipesc::network::types::Task& _return);
  void listTasks(std::vector< ::org::ssdut::sipesc::network::types::Task> & _return, const std::string& authenticationToken);
  void send_listTasks(const std::string& authenticationToken);
  void recv_listTasks(std::vector< ::org::ssdut::sipesc::network::types::Task> & _return);
  void postTask( ::org::ssdut::sipesc::network::types::CallResult& _return, const std::string& authenticationToken, const std::string& rawCommand);
  void send_postTask(const std::string& authenticationToken, const std::string& rawCommand);
  void recv_postTask( ::org::ssdut::sipesc::network::types::CallResult& _return);
  int64_t uploadFile(const std::string& authenticationToken, const std::string& fileName, const int64_t size, const  ::org::ssdut::sipesc::network::types::Bytes& data);
  void send_uploadFile(const std::string& authenticationToken, const std::string& fileName, const int64_t size, const  ::org::ssdut::sipesc::network::types::Bytes& data);
  int64_t recv_uploadFile();
  void deleteFile( ::org::ssdut::sipesc::network::types::CallResult& _return, const std::string& authenticationToken, const std::string& fileName);
  void send_deleteFile(const std::string& authenticationToken, const std::string& fileName);
  void recv_deleteFile( ::org::ssdut::sipesc::network::types::CallResult& _return);
  void downloadFile( ::org::ssdut::sipesc::network::types::Bytes& _return, const std::string& authenticationToken, const std::string& fileName);
  void send_downloadFile(const std::string& authenticationToken, const std::string& fileName);
  void recv_downloadFile( ::org::ssdut::sipesc::network::types::Bytes& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NetworkServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NetworkServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NetworkServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_refreshAuthentication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPublicUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listTasks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_downloadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NetworkServiceProcessor(boost::shared_ptr<NetworkServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &NetworkServiceProcessor::process_ping;
    processMap_["login"] = &NetworkServiceProcessor::process_login;
    processMap_["logout"] = &NetworkServiceProcessor::process_logout;
    processMap_["refreshAuthentication"] = &NetworkServiceProcessor::process_refreshAuthentication;
    processMap_["getUser"] = &NetworkServiceProcessor::process_getUser;
    processMap_["getPublicUserInfo"] = &NetworkServiceProcessor::process_getPublicUserInfo;
    processMap_["getTask"] = &NetworkServiceProcessor::process_getTask;
    processMap_["listTasks"] = &NetworkServiceProcessor::process_listTasks;
    processMap_["postTask"] = &NetworkServiceProcessor::process_postTask;
    processMap_["uploadFile"] = &NetworkServiceProcessor::process_uploadFile;
    processMap_["deleteFile"] = &NetworkServiceProcessor::process_deleteFile;
    processMap_["downloadFile"] = &NetworkServiceProcessor::process_downloadFile;
  }

  virtual ~NetworkServiceProcessor() {}
};

class NetworkServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NetworkServiceProcessorFactory(const ::boost::shared_ptr< NetworkServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NetworkServiceIfFactory > handlerFactory_;
};

class NetworkServiceMultiface : virtual public NetworkServiceIf {
 public:
  NetworkServiceMultiface(std::vector<boost::shared_ptr<NetworkServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NetworkServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NetworkServiceIf> > ifaces_;
  NetworkServiceMultiface() {}
  void add(boost::shared_ptr<NetworkServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping( ::org::ssdut::sipesc::network::types::CallResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void login( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login(_return, username, password);
    }
    ifaces_[i]->login(_return, username, password);
    return;
  }

  void logout(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logout(authenticationToken);
    }
    ifaces_[i]->logout(authenticationToken);
  }

  void refreshAuthentication( ::org::ssdut::sipesc::network::types::AuthenticationResult& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->refreshAuthentication(_return, authenticationToken);
    }
    ifaces_[i]->refreshAuthentication(_return, authenticationToken);
    return;
  }

  void getUser( ::org::ssdut::sipesc::network::types::User& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUser(_return, authenticationToken);
    }
    ifaces_[i]->getUser(_return, authenticationToken);
    return;
  }

  void getPublicUserInfo( ::org::ssdut::sipesc::network::types::PublicUserInfo& _return, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPublicUserInfo(_return, username);
    }
    ifaces_[i]->getPublicUserInfo(_return, username);
    return;
  }

  void getTask( ::org::ssdut::sipesc::network::types::Task& _return, const std::string& authenticationToken, const  ::org::ssdut::sipesc::network::types::ID taskId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTask(_return, authenticationToken, taskId);
    }
    ifaces_[i]->getTask(_return, authenticationToken, taskId);
    return;
  }

  void listTasks(std::vector< ::org::ssdut::sipesc::network::types::Task> & _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listTasks(_return, authenticationToken);
    }
    ifaces_[i]->listTasks(_return, authenticationToken);
    return;
  }

  void postTask( ::org::ssdut::sipesc::network::types::CallResult& _return, const std::string& authenticationToken, const std::string& rawCommand) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postTask(_return, authenticationToken, rawCommand);
    }
    ifaces_[i]->postTask(_return, authenticationToken, rawCommand);
    return;
  }

  int64_t uploadFile(const std::string& authenticationToken, const std::string& fileName, const int64_t size, const  ::org::ssdut::sipesc::network::types::Bytes& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadFile(authenticationToken, fileName, size, data);
    }
    return ifaces_[i]->uploadFile(authenticationToken, fileName, size, data);
  }

  void deleteFile( ::org::ssdut::sipesc::network::types::CallResult& _return, const std::string& authenticationToken, const std::string& fileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteFile(_return, authenticationToken, fileName);
    }
    ifaces_[i]->deleteFile(_return, authenticationToken, fileName);
    return;
  }

  void downloadFile( ::org::ssdut::sipesc::network::types::Bytes& _return, const std::string& authenticationToken, const std::string& fileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->downloadFile(_return, authenticationToken, fileName);
    }
    ifaces_[i]->downloadFile(_return, authenticationToken, fileName);
    return;
  }

};

}}}}} // namespace

#endif
